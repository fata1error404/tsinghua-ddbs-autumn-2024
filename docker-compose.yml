version: "3.8"

services:
    # MongoDB Config Servers
    config-1:
        image: mongo:latest
        container_name: config-1
        command: mongod --configsvr --replSet rs-config-server --port 27017
        networks:
            - data-center-network

    config-2:
        image: mongo:latest
        container_name: config-2
        command: mongod --configsvr --replSet rs-config-server --port 27017
        networks:
            - data-center-network

    config-3:
        image: mongo:latest
        container_name: config-3
        command: mongod --configsvr --replSet rs-config-server --port 27017
        networks:
            - data-center-network

    # MongoDB Shards
    shard-1a:
        image: mongo:latest
        container_name: shard-1a
        command: mongod --shardsvr --replSet rs-shard-1 --port 27017
        networks:
            - data-center-network

    shard-1b:
        image: mongo:latest
        container_name: shard-1b
        command: mongod --shardsvr --replSet rs-shard-1 --port 27017
        networks:
            - data-center-network

    shard-2a:
        image: mongo:latest
        container_name: shard-2a
        command: mongod --shardsvr --replSet rs-shard-2 --port 27017
        networks:
            - data-center-network

    shard-2b:
        image: mongo:latest
        container_name: shard-2b
        command: mongod --shardsvr --replSet rs-shard-2 --port 27017
        networks:
            - data-center-network

    # MongoDB Router
    router:
        image: mongo:latest
        container_name: router
        depends_on:
            - config-1
            - config-2
            - config-3
            - shard-1a
            - shard-1b
            - shard-2a
            - shard-2b
        command: mongos --configdb rs-config-server/config-1:27017,config-2:27017,config-3:27017 --bind_ip_all --port 27017
        ports:
            - "27100:27017"
        volumes:
            - type: bind
              source: ./data
              target: /app/data
            - type: bind
              source: ./scripts
              target: /app/scripts
        networks:
            - data-center-network

    # Frontend (Node.js Application)
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: frontend
        ports:
            - "3000:3000"
        volumes:
            - type: bind
              source: ./frontend
              target: /app
        networks:
            - data-center-network
        depends_on:
            - redis
            - router



    # Hadoop Namenode
    hadoop-namenode:
        image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
        container_name: hadoop-namenode
        environment:
            - CLUSTER_NAME=hadoop-cluster
        ports:
            - "9870:9870" # HDFS Web UI
            - "9000:9000" # HDFS Namenode RPC
        volumes:
            - type: bind
              source: ./hadoop/data
              target: /hadoop/data
        networks:
            - data-center-network

    # Hadoop Datanode
    hadoop-datanode:
        image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
        container_name: hadoop-datanode
        depends_on:
            - hadoop-namenode
        environment:
            - CLUSTER_NAME=hadoop-cluster
        volumes:
            - type: bind
              source: ./hadoop/data
              target: /hadoop/data
        networks:
            - data-center-network

    # Redis
    redis:
        image: redis:7.2-alpine
        container_name: redis
        ports:
            - "6379:6379" # Default Redis port
        networks:
            - data-center-network
        volumes:
            - redis-data:/data
        command: ["redis-server", "--appendonly", "yes"]

networks:
    data-center-network:
        driver: bridge

volumes:
    redis-data: